<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" 
		class="org.zerock.security.CustomLoginSuccessHandler" />
	<!--  pw 인코딩 처리 -->
   	<bean id="bcrtpytPasswordEncoder"
      class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
   	</bean>
   	<!-- customUserDetailService -->
   	<bean id="customUserDetailService"
   		class="org.zerock.security.CustomUserDetailsService"></bean>

	<security:http>
		
		<!-- 인증 페이지 설정 -->
		<security:intercept-url pattern="/sample2/all" access="permitAll"/>
		<security:intercept-url pattern="/sample2/member" 
			access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample2/admin" 
			access="hasRole('ROLE_ADMIN')"/>
			
		<!-- 성공시 customLoginSuccess 에서 원하는곳으로 이동 -->
		<security:form-login login-page="/customLogin"
			authentication-success-handler-ref="customLoginSuccess"/>
		
		<!-- 방법2: bean 객체를 등록하여 사용(다양한 처리 필요시 사용) -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃: post 방식 -->
		<security:logout logout-url="/customLogout" invalidate-session="true"/>
		
	</security:http>
	
	
	<!-- 인증 설정 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailService">
 				<!-- pw 인코딩 처리 -->
 				<security:password-encoder ref="bcrtpytPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
